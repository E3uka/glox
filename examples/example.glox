/* Examples of valid glox syntax (should parse) */

/*
multiline 
comments
*/

/* types */
name: string = "Chima";
age: s64 = 24;
mula: f64 = 32000.55;
truth: bool = true;
void: null = NULL;

/* casting */
f64<-age;
s64<-mula;

/* declarations */
const old_dude: s64 = 28;   // typed immutable declaration
const location := "London"; // inferred immutable declaration
changeme := "password";     // inferred mutable declaration
lies: bool = false;         // typed mutable declaration

/* quick maths (correct precedence parsing) */
grouping := 1 / (3 + 2);
maths := 9 + 12 / 3 * 5;

/* blocks and scope (TODO: broken by recent change) */

/* function syntax */
create_habit :: (cue: string, craving: string, response: string, reward: s64) -> string
{
	println("I can see clear-ly now");
	reward++;
	result := craving(response(cue)); // nested function calls
	return result;
};

/* structs & selections */
Connection :: struct 
{
	address: string;
	online:  string;
	count:   s64;
};

Connection.address;
Connection.add_user(user123, "GMT");
Connection.count += 1;

/* if and while statements */
while connection.is_online() { 
	return true; 
};

if connection.address == "" {
	println("no address supplied");
} else {
	printf("address is %v\n", address);
};

/* pointer reference and dereference */
value := "some location";
where := &value;
there := *where;

/*
TODO: ArrayType, IFaceExpr, FnExpr & FuncType (first class functions)

TODO: end semicolon error messages
TODO: chore: character start locations for error messages
*/
